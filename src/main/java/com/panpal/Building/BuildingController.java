package com.panpal.Building;

import com.panpal.Error.BuildingNoLongerExistsException;
import com.panpal.Error.DuplicateBuildingException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.Iterator;

import com.panpal.RequestInfo;
import com.panpal.ResultController;
import com.panpal.Floor.FloorRepository;
import com.panpal.Floor.Floor;
import com.panpal.Desk.DeskRepository;
import com.panpal.Desk.Desk;
import com.panpal.Booking.BookingRepository;
import com.panpal.Booking.Booking;

@CrossOrigin(origins = "https://beeware319-front.herokuapp.com")
@RestController
@RequestMapping(path="/building")
public class BuildingController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private BuildingRepository buildingRepository;
	@Autowired
	private FloorRepository floorRepository;
	@Autowired
	private DeskRepository deskRepository;
	@Autowired
	private BookingRepository bookingRepository;
	private ResultController resultController = new ResultController();

	@PostMapping
	// public String addNewBuilding (@RequestBody String name
	// , @RequestBody String address) {
	public ResponseEntity<String> addNewBuilding (@RequestBody RequestInfo info) {
		String name = info.getName();
		String address = info.getAddress();
		String code = info.getCode();

		try {
			Building n = new Building();
			n.setName(name);
			n.setAddress(address);
			n.setCode(code);
			try{
				buildingRepository.save(n);

			} catch (Exception e) {
				throw new DuplicateBuildingException("the name or the address of the building already exists");
			}
			return resultController.handleSuccess("Building Saved");
		} catch (Exception e){	
			return resultController.handleError(e);
		}
	}

	@PutMapping
	// public String updateBuilding (@RequestParam Integer id
	// , @RequestParam(required = false) String name
	// , @RequestParam(required = false) String address) {
	public ResponseEntity<String> updateBuilding (@RequestBody RequestInfo info) {
		try {
			Building n = buildingRepository.findBuildingById(info.getId());

			if (n == null) {
				throw new BuildingNoLongerExistsException("Building with id=" + info.getId() + " does not exist");
			}

			String name = info.getName();
			String address = info.getAddress();
			String code = info.getCode();
			if (name != null) {
				n.setName(name);
			}
			if (address != null) {
				n.setAddress(address);
			}
			if (code != null) {
				n.setCode(code);
			}

			try{
				buildingRepository.save(n);

			} catch (Exception e) {
				new DuplicateBuildingException("the name or the address of the building already exists");
			}
			return resultController.handleSuccess("Building Updated");
		} catch (Exception e) {
			return resultController.handleError(e);
		}

	}

	@DeleteMapping
	// public String deleteBuilding (@RequestParam Integer id) {
	public ResponseEntity<String> deleteBuilding (@RequestBody RequestInfo info) {
		try {
			Building n = buildingRepository.findBuildingById(info.getId());

			if (n == null) {
				throw new BuildingNoLongerExistsException("Building with id = "+info.getId()+" does not exist") ;
			}

			deleteBuildingCasc(n);
			buildingRepository.delete(n);
			return resultController.handleSuccess("Building deleted");

		} catch (Exception e){
			return resultController.handleError(e);
		}
	}
	@GetMapping(path="/all")
	public Iterable<Building> getAllBuildings() {
		return buildingRepository.findByOrderByNameAsc();
		// return buildingRepository.findAll();
	}

	@GetMapping
	public Building getBuilding(@RequestParam Integer id) {
		return buildingRepository.findBuildingById(id);
	}

	private void deleteBuildingCasc(Building building) {
		Iterator<Floor> floorIterator = floorRepository.findByBuilding(building).iterator();
		while (floorIterator.hasNext()) {
			Floor floor = floorIterator.next();
			deleteFloorCasc(floor);
			floorRepository.delete(floor);
		}
	}

	private void deleteFloorCasc(Floor floor) {
		Iterator<Desk> deskIterator = deskRepository.findByFloor(floor).iterator();
		while (deskIterator.hasNext()) {
			Desk desk = deskIterator.next();
			deleteDeskCasc(desk);
			deskRepository.delete(desk);
		}
	}

	private void deleteDeskCasc(Desk desk) {
		Iterator<Booking> bookingIterator = bookingRepository.findByDesk(desk).iterator();
		while (bookingIterator.hasNext()) {
			bookingRepository.delete(bookingIterator.next());
		}
	}
}
